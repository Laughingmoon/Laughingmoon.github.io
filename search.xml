<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[svn钩子自动同步代码]]></title>
    <url>%2F2018%2F06%2F28%2Fsvn%E9%92%A9%E5%AD%90%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5%E4%BB%A3%E7%A0%81%2F</url>
    <content type="text"><![CDATA[设置svn钩子自动更新1.安装svn yum install subversion 2.建个svn的根目录，方便管理 mkdir -p /home/svn/ 3.创建版本库 svnadmin create project1 4.创建站点目录 mkdir /home/www/web 5.建立钩子脚本在/home/svn/repos/hooks 目录下创建 post-commit，内容如下 #!/bin/bash export LANG=zh_CN.UTF-8 echo “Code Deployed at date &quot;+%Y-%m-%d %H:%M&quot;“ &gt;&gt; /home/svn/repos/hooks/deploy_log /usr/bin/svn update –username user1 –password user1 /home/www/web post-commit给执行权限 chmod +x post-commit 6.Checkout一份代码到站点目录 /usr/bin/svn checkout svn://localhost/repos /home/www/web 7.启动svn svnserve -d -r /home/svn8.然后用windows svn客户端checkout一份代码到本地目录，然后在这个目录新增一个文件。那么就可以看到 /home/www/web目录下就新增了这个文件了。]]></content>
      <categories>
        <category>SVN</category>
      </categories>
      <tags>
        <tag>svn钩子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[shadowsocks科学上网]]></title>
    <url>%2F2018%2F06%2F28%2Fshadowsocks%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%2F</url>
    <content type="text"><![CDATA[本脚本适用环境：系统支持：CentOS，Debian，Ubuntu内存要求：≥64M 默认配置：服务器端口：自己设定（如不设定，默认从 9000-19999 之间随机生成）密码：自己设定（如不设定，默认为 teddysun.com）加密方式：自己设定（如不设定，默认为 aes-256-cfb） Shadowsocks for Windows 客户端下载：https://github.com/shadowsocks/shadowsocks-windows/releases 使用方法：使用root用户登录，运行以下命令： wget --no-check-certificate -O shadowsocks-go.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-go.sh chmod +x shadowsocks-go.sh ./shadowsocks-go.sh 2&gt;&amp;1 | tee shadowsocks-go.log 安装完成后，脚本提示如下： Congratulations, Shadowsocks-go server install completed! Your Server IP :your_server_ip Your Server Port :your_server_port Your Password :your_password Your Encryption Method:your_encryption_method 卸载方法：使用 root 用户登录，运行以下命令： ./shadowsocks-go.sh uninstall 其他事项：客户端配置的参考链接：https://teddysun.com/339.html 安装完成后即已后台启动 Shadowsocks-go ，运行： /etc/init.d/shadowsocks status 可以查看 Shadowsocks-go 进程是否已经启动。本脚本安装完成后，已将 shadowsocks-go 加入开机自启动。 使用命令： 启动：/etc/init.d/shadowsocks start 停止：/etc/init.d/shadowsocks stop 重启：/etc/init.d/shadowsocks restart 状态：/etc/init.d/shadowsocks status 多用户多端口配置文件示例：配置文件路径：/etc/shadowsocks/config.json { “port_password”:{ “8989”:”password0”, “9001”:”password1”, “9002”:”password2”, “9003”:”password3”, “9004”:”password4” }, “method”:”your_encryption_method”, “timeout”:600 }]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>VPN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL/MariaDB主主数据同步配置]]></title>
    <url>%2F2018%2F06%2F28%2FMySQL-MariaDB%E4%B8%BB%E4%B8%BB%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[在一些高可用的场景中需要配置主主互备，即双主数据同步。MySQL的主主同步和主从同步的原理一样，只是主主同步的双方都是主从角色。本文以MariaDB来演示主主配置细节。 1.准备环境操作系统：CentOS6.5 64位MariaDB版本：10.2.12节点DB1：192.168.11.31节点DB2：192.168.11.32开了防火墙策略的需要开放端口（默认3306）。 2.配置DB1的配置文件(my.cnf)在/etc/my.cnf中添加以下选项： server-id = 1 log-bin=mysql-bin relay-log = mysql-relay-bin replicate-wild-ignore-table=mysql.% replicate-wild-ignore-table=information_schema.% log-slave-updates=on slave-skip-errors=all auto-increment-offset=1 auto-increment-increment=2 binlog_format=mixed expire_logs_days = 10 server-id = 1服务器节点ID，必须唯一。 log-bin=mysql-bin开启二进制日志功能，mysql-bin是命名格式，会生成文件名为mysql-bin.000001、mysql-bin.000002等日志文件。 relay-log = mysql-relay-bin作为从服务器时的中继日志。 replicate-wild-ignore-table=mysql.%是复制过滤选项，可以过滤不需要复制同步的数据库或表，如“mysql.%”指不复制MySQL库下的所有表，依此类推，多个数据库就多写几行。注意不建议在主库或从库上使用binlog-do-db或binlog-ignore-db，也不要再从库上使用replicate-do-db或replicate-do-db选项，因为这样可能会产生跨库更新失败的问题。我们推荐使用replicate-wild-do-table和replicate-wild-ignore-table解决复制过滤问题。 log-slave-updates=onslave 将复制事件写进自己的二进制日志。 slave-skip-errors=all跳过主从复制中遇到的所有错误或指定类型的错误,避免 slave 端复制中断。 auto-increment-offset=1主键自增规则，自增因子（每次加2）。 auto-increment-increment=2主键自增规则，自增偏移（从1开始），单数。 binlog_format=mixed主从复制的格式(mixed,statement,row,默认格式是 statement)。 expire_logs_days = 10日志保存天数：10天。 3.配置DB2的配置文件(my.cnf)在/etc/my.cnf中添加以下选项： server-id = 2 log-bin=mysql-bin relay-log = mysql-relay-bin replicate-wild-ignore-table=mysql.% replicate-wild-ignore-table=information_schema.% log-slave-updates=on slave-skip-errors=all auto-increment-offset=2 auto-increment-increment=2 binlog_format=mixed expire_logs_days = 10 DB2的my.cnf的配置基本一致，主主模式下区别有两个： server-id = 2服务器节点ID，一定要保证唯一值，不能和DB1冲突。auto-increment-offset=2设置主键自增规则，自增偏移2，即双数。DB1是单数，这样DB1和DB2就形成了奇偶ID不会重复的情况，就能保证表中的主键不冲突。 我们这里两台服务器DB1和DB2中的MariaDB是新安装的，没有多余的表。假如你的数据库中已经有数据了，那最好保证DB1和DB2的数据一致，在数据同步之前，先可关闭数据库的写权限。4.重启MariaDB服务配置好MariaDB的配置文件后，保存并重启服务，使配置生效。 /etc/init.d/mariadb restart 5.DB1作为Master授权给DB2在DB1中进入到MySQL终端： [root@localhost ~]# /usr/local/mariadb/bin/mysql -uroot -p 然后允许用户hello32，使用密码：123456x，可以从IP：192.168.11.32（DB2）访问DB1，并授予复制同步数据的权限。 MariaDB [(none)]&gt; grant replication slave, replication client on *.* to &apos;hello32&apos;@&apos;192.168.11.32&apos; identified by &apos;123456x&apos;; mysql&gt; flush privileges; 授权完毕后记得刷新权限表。 接着马上查看binlog文件的position（偏移）和File（日志文件）的值，从机上(DB2)需要用到： MariaDB [(none)]&gt; show master status; +------------------+----------+--------------+------------------+ | File | Position | Binlog_Do_DB | Binlog_Ignore_DB | +------------------+----------+--------------+------------------+ | mysql-bin.000007 | 358 | | | +------------------+----------+--------------+------------------+ 1 row in set (0.01 sec) 6.DB2作为Master授权给DB1同样的，进入DB2的MySQL终端，授权给DB1的用户： MariaDB [(none)]&gt; grant replication slave, replication client on *.* to &apos;hello31&apos;@&apos;192.168.11.31&apos; identified by &apos;123456x&apos;; mysql&gt; flush privileges; 接着马上查看binlog文件的position（偏移）和File（日志文件）的值，从机上(DB1)需要用到： MariaDB [(none)]&gt; show master status; +------------------+----------+--------------+------------------+ | File | Position | Binlog_Do_DB | Binlog_Ignore_DB | +------------------+----------+--------------+------------------+ | mysql-bin.000013 | 358 | | | +------------------+----------+--------------+------------------+ 1 row in set (0.00 sec) 7.配置DB1的SlaveDB1作为Slave从库，需要访问主库DB2，使用以下命令： MariaDB [(none)]&gt; change master to master_host=&apos;192.168.11.32&apos;,master_user=&apos;hello31&apos;, master_password=&apos;123456x&apos;, master_port=3306, master_log_file=&apos;mysql-bin.000013&apos;, master_log_pos=358, master_connect_retry=30; 注意日志文件和偏移值是第6步DB2中show master status查看到的。master_connect_retry=30是尝试连接时间。 8.配置DB2的Slave现在DB2作为Slave从库，需要连接主库DB1： MariaDB [(none)]&gt; change master to master_host=&apos;192.168.11.31&apos;,master_user=&apos;hello32&apos;, master_password=&apos;123456x&apos;, master_port=3306, master_log_file=&apos;mysql-bin.000007&apos;, master_log_pos=358, master_connect_retry=30; 这里的日志文件和偏移值是第5步DB1中查看到的。 9.启动Slave现在可以启动同步复制了，在两台服务器上分别使用命令： MariaDB [(none)]&gt; start slave; Query OK, 0 rows affected (0.00 sec) 在DB1上执行： MariaDB [(none)]&gt; show slave status\G; *************************** 1. row *************************** Slave_IO_State: Waiting for master to send event Master_Host: 192.168.11.32 Master_User: hello31 Master_Port: 3306 Connect_Retry: 30 Master_Log_File: mysql-bin.000013 Read_Master_Log_Pos: 358 Relay_Log_File: mysql-relay-bin.000002 Relay_Log_Pos: 555 Relay_Master_Log_File: mysql-bin.000013 Slave_IO_Running: Yes Slave_SQL_Running: Yes Replicate_Do_DB: Replicate_Ignore_DB: Replicate_Do_Table: Replicate_Ignore_Table: Replicate_Wild_Do_Table: Replicate_Wild_Ignore_Table: mysql.%,information_schema.% 在DB2上执行： MariaDB [(none)]&gt; show slave status\G; *************************** 1. row *************************** Slave_IO_State: Waiting for master to send event Master_Host: 192.168.11.31 Master_User: hello32 Master_Port: 3306 Connect_Retry: 30 Master_Log_File: mysql-bin.000007 Read_Master_Log_Pos: 358 Relay_Log_File: mysql-relay-bin.000002 Relay_Log_Pos: 555 Relay_Master_Log_File: mysql-bin.000007 Slave_IO_Running: Yes Slave_SQL_Running: Yes Replicate_Do_DB: Replicate_Ignore_DB: Replicate_Do_Table: Replicate_Ignore_Table: Replicate_Wild_Do_Table: Replicate_Wild_Ignore_Table: mysql.%,information_schema.% 我们看到两台服务器的数据同步信息中Slave_IO_Running和Slave_SQL_Running 都是Yes，说明我们配置成功了！ 10.验证我们在DB1上新建一个数据库：myhelloweba，然后在myhelloweba库中新建一个表article，再往article表中插入一条数据。 MariaDB [(none)]&gt; create database if not exists myhelloweba default character set utf8 collate utf8_general_ci; MariaDB [(none)]&gt; use myhelloweba; Database changed MariaDB [myhelloweba]&gt; insert into article (id,title) values (null, &apos;Helloweba&apos;); Query OK, 1 row affected (0.01 sec) MariaDB [myhelloweba]&gt; insert into article (id,title) values (null, &apos;Helloweba&apos;); Query OK, 1 row affected (0.01 sec) 我们在到DB2查看数据表： MariaDB [myhelloweba]&gt; select * from article; +----+-----------+ | id | title | +----+-----------+ | 1 | Helloweba | +----+-----------+ 1 row in set (0.00 sec) 发现DB2的article表数据也有了。反复操作几次，看下两台数据库中的数据完全一致，说明我们的主主配置是成功的。]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>msyql同步</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql双主一从同步]]></title>
    <url>%2F2018%2F06%2F28%2FMySQL%E5%8F%8C%E4%B8%BB%E4%B8%80%E4%BB%8E%E5%90%8C%E6%AD%A5%2F</url>
    <content type="text"><![CDATA[目前MySQL依然只支持一个Slave从一个Master复制数据，虽然也可以做到一主多备(M-&gt;S)，双主复制(MM)等架构，但是局限性依然很大。由于项目的要求，需要各个主库的表整合到一个地方进行统计和分析，要是每次连不同的实例操作，是一件非常耗体力的操作。所以继续一种类似多主一从的实例。 安装：可以根据一键安装包只安装mysql，亲测很方便实用。https://lnmp.org/install.html 环境搭建：Master 1：200.51(MariaDB)Master 2：200.52(MariaDB)Slave ：200.73(MariaDB) 修改好server-id 确认好Master的POS： M1: rep@192.168.200.51 : (none) 10:26:11&gt;show master status; +--------------------+----------+--------------+------------------+ | File | Position | Binlog_Do_DB | Binlog_Ignore_DB | +--------------------+----------+--------------+------------------+ | mysql-bin51.000013 | 107 | | test | +--------------------+----------+--------------+------------------+ row in set (0.01 sec) M2： rep@192.168.200.52 : r2 10:26:23&gt;show master status; +---------------------+----------+--------------+------------------+ | File | Position | Binlog_Do_DB | Binlog_Ignore_DB | +---------------------+----------+--------------+------------------+ | mysql-bin_52.000106 | 107 | | test | +---------------------+----------+--------------+------------------+ row in set (0.00 sec) 1、主服务器的配置2、编辑/etc/my.cnf文件[root@localhost ~]# vim /etc/my.cnf 在[mysqld]段的最后添加以下内容 skip_name_resolve = ON innodb_file_per_table = ON server-id = 1 （id号不能跟从服务器相同） log-bin = master-log51（自定义二进制日志文件名） 3、授权可以复制本地数据库信息的主机 [root@localhost ~]# /etc/init.d/mariadb start（启动mariadb server） [root@localhost ~]# mysql MariaDB [(none)]&gt; grant replication slave,replication client on *.* to &apos;repluser&apos;@&apos;10.1.51.%&apos; identified by &apos;replpasswd&apos;; MariaDB [(none)]&gt; flush privileges; 4、第二台主机跟同上，但是server-id 不能相同，log-bin 文件名要区分开。5、Slave上操作 MariaDB [(none)]&gt; change master &apos;r1&apos; to master_host=&apos;192.168.200.51&apos;,master_user=&apos;rep&apos;,master_password=&apos;rep123456&apos;,master_log_file=&apos;mysql-bin51.000013&apos;,master_log_pos=107; Query OK, 0 rows affected (0.23 sec) MariaDB [(none)]&gt; change master &apos;r2&apos; to master_host=&apos;192.168.200.52&apos;,master_user=&apos;rep&apos;,master_password=&apos;rep123456&apos;,master_log_file=&apos;mysql-bin_52.000106&apos;,master_log_pos=107; Query OK, 0 rows affected (0.25 sec) #查看所有通道 MariaDB [(none)]&gt; show all slaves status\G; *************************** 1. row *************************** Connection_name: r1 Slave_SQL_State: Slave_IO_State: Master_Host: 192.168.200.51 Master_User: rep Master_Port: 3306 Connect_Retry: 60 Master_Log_File: mysql-bin51.000013 Read_Master_Log_Pos: 107 Relay_Log_File: mysqld-relay-bin-r1.000001 Relay_Log_Pos: 4 Relay_Master_Log_File: mysql-bin51.000013 Slave_IO_Running: No Slave_SQL_Running: No Replicate_Do_DB: Replicate_Ignore_DB: Replicate_Do_Table: Replicate_Ignore_Table: Replicate_Wild_Do_Table: Replicate_Wild_Ignore_Table: Last_Errno: 0 Last_Error: Skip_Counter: 0 Exec_Master_Log_Pos: 107 Relay_Log_Space: 248 Until_Condition: None Until_Log_File: Until_Log_Pos: 0 Master_SSL_Allowed: No Master_SSL_CA_File: Master_SSL_CA_Path: Master_SSL_Cert: Master_SSL_Cipher: Master_SSL_Key: Seconds_Behind_Master: NULL Master_SSL_Verify_Server_Cert: No Last_IO_Errno: 0 Last_IO_Error: Last_SQL_Errno: 0 Last_SQL_Error: Replicate_Ignore_Server_Ids: Master_Server_Id: 0 Master_SSL_Crl: Master_SSL_Crlpath: Using_Gtid: No Gtid_IO_Pos: Retried_transactions: 0 Max_relay_log_size: 104857600 Executed_log_entries: 0 Slave_received_heartbeats: 0 Slave_heartbeat_period: 1800.000 Gtid_Slave_Pos: *************************** 2. row *************************** Connection_name: r2 Slave_SQL_State: Slave_IO_State: Master_Host: 192.168.200.52 Master_User: rep Master_Port: 3306 Connect_Retry: 60 Master_Log_File: mysql-bin_52.000106 Read_Master_Log_Pos: 107 Relay_Log_File: mysqld-relay-bin-r2.000001 Relay_Log_Pos: 4 Relay_Master_Log_File: mysql-bin_52.000106 Slave_IO_Running: No Slave_SQL_Running: No Replicate_Do_DB: Replicate_Ignore_DB: Replicate_Do_Table: Replicate_Ignore_Table: Replicate_Wild_Do_Table: Replicate_Wild_Ignore_Table: Last_Errno: 0 Last_Error: Skip_Counter: 0 Exec_Master_Log_Pos: 107 Relay_Log_Space: 248 Until_Condition: None Until_Log_File: Until_Log_Pos: 0 Master_SSL_Allowed: No Master_SSL_CA_File: Master_SSL_CA_Path: Master_SSL_Cert: Master_SSL_Cipher: Master_SSL_Key: Seconds_Behind_Master: NULL Master_SSL_Verify_Server_Cert: No Last_IO_Errno: 0 Last_IO_Error: Last_SQL_Errno: 0 Last_SQL_Error: Replicate_Ignore_Server_Ids: Master_Server_Id: 0 Master_SSL_Crl: Master_SSL_Crlpath: Using_Gtid: No Gtid_IO_Pos: Retried_transactions: 0 Max_relay_log_size: 104857600 Executed_log_entries: 0 Slave_received_heartbeats: 0 Slave_heartbeat_period: 1800.000 Gtid_Slave_Pos: rows in set (0.00 sec) ERROR: No query specified 查看单个通道 MariaDB [(none)]&gt; show slave &apos;r1&apos; status\G; *************************** 1. row *************************** Slave_IO_State: Master_Host: 192.168.200.51 Master_User: rep Master_Port: 3306 Connect_Retry: 60 Master_Log_File: mysql-bin51.000013 Read_Master_Log_Pos: 107 Relay_Log_File: mysqld-relay-bin-r1.000001 Relay_Log_Pos: 4 Relay_Master_Log_File: mysql-bin51.000013 Slave_IO_Running: No Slave_SQL_Running: No Replicate_Do_DB: Replicate_Ignore_DB: Replicate_Do_Table: Replicate_Ignore_Table: Replicate_Wild_Do_Table: Replicate_Wild_Ignore_Table: Last_Errno: 0 Last_Error: Skip_Counter: 0 Exec_Master_Log_Pos: 107 Relay_Log_Space: 248 Until_Condition: None Until_Log_File: Until_Log_Pos: 0 Master_SSL_Allowed: No Master_SSL_CA_File: Master_SSL_CA_Path: Master_SSL_Cert: Master_SSL_Cipher: Master_SSL_Key: Seconds_Behind_Master: NULL Master_SSL_Verify_Server_Cert: No Last_IO_Errno: 0 Last_IO_Error: Last_SQL_Errno: 0 Last_SQL_Error: Replicate_Ignore_Server_Ids: Master_Server_Id: 0 Master_SSL_Crl: Master_SSL_Crlpath: Using_Gtid: No Gtid_IO_Pos: row in set (0.00 sec) ERROR: No query specified MariaDB [(none)]&gt; show slave &apos;r2&apos; status\G; *************************** 1. row *************************** Slave_IO_State: Master_Host: 192.168.200.52 Master_User: rep Master_Port: 3306 Connect_Retry: 60 Master_Log_File: mysql-bin_52.000106 Read_Master_Log_Pos: 107 Relay_Log_File: mysqld-relay-bin-r2.000001 Relay_Log_Pos: 4 Relay_Master_Log_File: mysql-bin_52.000106 Slave_IO_Running: No Slave_SQL_Running: No Replicate_Do_DB: Replicate_Ignore_DB: Replicate_Do_Table: Replicate_Ignore_Table: Replicate_Wild_Do_Table: Replicate_Wild_Ignore_Table: Last_Errno: 0 Last_Error: Skip_Counter: 0 Exec_Master_Log_Pos: 107 Relay_Log_Space: 248 Until_Condition: None Until_Log_File: Until_Log_Pos: 0 Master_SSL_Allowed: No Master_SSL_CA_File: Master_SSL_CA_Path: Master_SSL_Cert: Master_SSL_Cipher: Master_SSL_Key: Seconds_Behind_Master: NULL Master_SSL_Verify_Server_Cert: No Last_IO_Errno: 0 Last_IO_Error: Last_SQL_Errno: 0 Last_SQL_Error: Replicate_Ignore_Server_Ids: Master_Server_Id: 0 Master_SSL_Crl: Master_SSL_Crlpath: Using_Gtid: No Gtid_IO_Pos: row in set (0.00 sec) ------------------------------------------------------------ 开启单个通道 MariaDB [(none)]&gt; start slave &apos;r1&apos;; Query OK, 0 rows affected (0.00 sec) MariaDB [(none)]&gt; start slave &apos;r2&apos;; Query OK, 0 rows affected (0.00 sec) 开启所有通道 MariaDB [(none)]&gt; start all slaves; Query OK, 0 rows affected, 2 warnings (0.01 sec) MariaDB [(none)]&gt; show warnings; +-------+------+--------------------+ | Level | Code | Message | +-------+------+--------------------+ | Note | 1937 | SLAVE &apos;r2&apos; started | | Note | 1937 | SLAVE &apos;r1&apos; started | +-------+------+--------------------+ rows in set (0.00 sec) MariaDB [(none)]&gt; show all slaves status\G; *************************** 1. row *************************** Connection_name: r1 #master的连接名，通道名，第一个参数。 Slave_SQL_State: Slave has read all relay log; waiting for the slave I/O thread to update it Slave_IO_State: Waiting for master to send event Master_Host: 192.168.200.51 Master_User: rep Master_Port: 3306 Connect_Retry: 60 Master_Log_File: mysql-bin51.000013 Read_Master_Log_Pos: 107 Relay_Log_File: mysqld-relay-bin-r1.000005 Relay_Log_Pos: 396 Relay_Master_Log_File: mysql-bin51.000013 Slave_IO_Running: Yes Slave_SQL_Running: Yes Replicate_Do_DB: Replicate_Ignore_DB: Replicate_Do_Table: Replicate_Ignore_Table: Replicate_Wild_Do_Table: Replicate_Wild_Ignore_Table: Last_Errno: 0 Last_Error: Skip_Counter: 0 Exec_Master_Log_Pos: 107 Relay_Log_Space: 845 Until_Condition: None Until_Log_File: Until_Log_Pos: 0 Master_SSL_Allowed: No Master_SSL_CA_File: Master_SSL_CA_Path: Master_SSL_Cert: Master_SSL_Cipher: Master_SSL_Key: Seconds_Behind_Master: 0 Master_SSL_Verify_Server_Cert: No Last_IO_Errno: 0 Last_IO_Error: Last_SQL_Errno: 0 Last_SQL_Error: Replicate_Ignore_Server_Ids: Master_Server_Id: 1 Master_SSL_Crl: Master_SSL_Crlpath: Using_Gtid: No Gtid_IO_Pos: Retried_transactions: 0 #这个连接重试事务的次数 Max_relay_log_size: 104857600 #relay log的最大值. 如果是0的话，那么在启动的时候就会被设置成max_binlog_size 的大小 Executed_log_entries: 17 #slave已经指向了多少个日志条目 Slave_received_heartbeats: 0 #我们从master收到了多少个心跳包 Slave_heartbeat_period: 1800.000 #多久从master请求一个心跳包 (以秒计算) Gtid_Slave_Pos: Slave_IO_Running: YesSlave_SQL_Running: Yes 这两个参数同为yes 说明已经同步成功 总结：经过上面的测试，实现了多个主实例的数据同步到一个从实例，这个就可以把集中做分析的数据表同步到一起进行分析处理，大大减少了数据的中间处理时间和安全，这里还有一点特别注意的是，在同步数据库的时候可以用过滤选项（Replicate_Do_Table、Replicate_Ignore_Table、Replicate_Wild_Do_Table、Replicate_Wild_Ignore_Table），看着需要同步自己需要的表，不需要把没必要的也同步过来。]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>msyql同步</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[快乐就是不戴面具的忧伤]]></title>
    <url>%2F2018%2F06%2F25%2F%E5%BF%AB%E4%B9%90%E5%B0%B1%E6%98%AF%E4%B8%8D%E6%88%B4%E9%9D%A2%E5%85%B7%E7%9A%84%E5%BF%A7%E4%BC%A4%2F</url>
    <content type="text"><![CDATA[欢乐与忧伤纪伯伦 一位妇人说：请给我们谈谈欢乐和忧伤。他回答：你们的欢乐是不带面具的忧伤。你欢笑的泉眼常常也饱含着泪水。除此之外，又当如何？镌刻在你们身上的忧伤愈深，你们能盛装的欢乐愈多。斟满了美酒的杯盏，难道不是曾在陶工炉火中锻造的杯盏吗？当你们快乐时，请审视自己的内心，你们会发现曾经的忧伤如今却让你们快乐。当你们忧伤时，请再次审视自己的内心，你们会发现曾经的快乐如今却让你们流泪。你们中有些人说：“欢乐胜于忧伤。”另一些人则说：“不，忧伤更伟大。”但我要说，他们是一体的。它们一同降临，当其中一个单独与你同坐时，记住，另一个正在你的床上安歇。的确，你们就像在忧伤与欢乐之间摇摆不定的天平。只有当你们彻底空虚，你们才能平衡稳定。把你浮沉不定的快乐和悲伤都留给那用你来称量金银的守财奴吧。]]></content>
      <categories>
        <category>午后时光</category>
      </categories>
      <tags>
        <tag>“生活”</tag>
      </tags>
  </entry>
</search>
